from collections import deque

def simulasi_undo_redo():
    history = deque()  # Menyimpan riwayat tindakan (untuk undo)
    redo_stack = deque()  # Menyimpan riwayat redo
    queue = deque()  # Antrian pelanggan

    while True:
        print("\n1. Tambah customer ke antrian")
        print("2. Layani customer")
        print("3. Tampilkan antrian")
        print("4. Undo")
        print("5. Redo")
        print("6. Keluar")
        pilihan = input("Pilih opsi: ")

        if pilihan == "1":
            nama = input("Masukkan nama customer: ")
            queue.append(nama)
            history.append(("tambah", nama))  # Menyimpan tindakan untuk undo
            redo_stack.clear()  # Clear redo stack setelah aksi baru
            print(f"Customer {nama} ditambahkan ke antrian.")
        
        elif pilihan == "2":
            if queue:
                dilayani = queue.popleft()
                history.append(("layani", dilayani))  # Menyimpan tindakan untuk undo
                redo_stack.clear()  # Clear redo stack setelah aksi baru
                print(f"Customer {dilayani} sedang dilayani.")
            else:
                print("Antrian kosong!")
        
        elif pilihan == "3":
            print("Antrian saat ini:", list(queue))
        
        elif pilihan == "4":
            if history:
                action, value = history.pop()  # Mengambil aksi terakhir untuk undo
                if action == "tambah":
                    queue.remove(value)  # Membatalkan penambahan customer
                    redo_stack.append(("tambah", value))  # Menyimpan aksi untuk redo
                elif action == "layani":
                    queue.appendleft(value)  # Membatalkan pelayanan customer
                    redo_stack.append(("layani", value))  # Menyimpan aksi untuk redo
                print(f"Undo: Aksi {action} customer {value}.")
            else:
                print("Tidak ada tindakan yang bisa di-undo.")
        
        elif pilihan == "5":
            if redo_stack:
                action, value = redo_stack.pop()  # Mengambil aksi terakhir untuk redo
                if action == "tambah":
                    queue.append(value)  # Menambahkan kembali customer yang di-undo
                elif action == "layani":
                    queue.popleft()  # Menyelesaikan kembali pelayanan customer yang di-undo
                print(f"Redo: Aksi {action} customer {value}.")
            else:
                print("Tidak ada tindakan yang bisa di-redo.")
        
        elif pilihan == "6":
            print("Keluar dari program.")
            break
        
        else:
            print("Opsi tidak valid!")

# Menjalankan simulasi
simulasi_undo_redo()
